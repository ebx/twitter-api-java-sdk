/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/

package com.twitter.clientlib.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.twitter.clientlib.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Objects;

public class MediaUploadAppendResponseData {
  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private Long expiresAt;
  
  public MediaUploadAppendResponseData() {
  }
  
  public MediaUploadAppendResponseData expiresAt(Long expiresAfterSecs) {
    this.expiresAt = expiresAfterSecs;
    return this;
  }
  
  public Long getExpiresAt() {
    return expiresAt;
  }
  
  public void setExpiresAt(Long expiresAt) {
    this.expiresAt = expiresAt;
  }
  
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaUploadAppendResponseData that = (MediaUploadAppendResponseData) o;
    return Objects.equals(expiresAt, that.expiresAt);
  }
  
  @Override
  public int hashCode() {
    return Objects.hash(expiresAt);
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaUploadAppendResponseData {\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  
  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;
  
  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expires_at");
    
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expires_at");
  }
  
  /**
   * Validates the JSON Object and throws an exception if issues found
   *
   * @param jsonObj JSON Object
   * @throws IOException if the JSON Object is invalid with respect to UploadMediaResponseData
   */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // if (jsonObj == null) {
    //   if (UploadMediaResponseData.openapiRequiredFields.isEmpty()) {
    //     return;
    //   } else { // has required fields
    //     throw new IllegalArgumentException(String.format("The required field(s) %s in UploadMediaResponseData is not found in the empty JSON string", UploadMediaResponseData.openapiRequiredFields.toString()));
    //   }
    // }
    
    
    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : openapiRequiredFields) {
      if (jsonObj.get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
      }
    }
    if (jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
    }
  }
  
  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!MediaUploadAppendResponseData.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'UploadMediaResponseData' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<MediaUploadAppendResponseData> thisAdapter
          = gson.getDelegateAdapter(this, TypeToken.get(MediaUploadAppendResponseData.class));
      
      return (TypeAdapter<T>) new TypeAdapter<MediaUploadAppendResponseData>() {
        @Override
        public void write(JsonWriter out, MediaUploadAppendResponseData value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        
        @Override
        public MediaUploadAppendResponseData read(JsonReader in) throws IOException {
          JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
          validateJsonObject(jsonObj);
          return thisAdapter.fromJsonTree(jsonObj);
        }
        
      }.nullSafe();
    }
  }
  
  /**
   * Create an instance of UploadMediaResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadMediaResponseData
   * @throws IOException if the JSON string is invalid with respect to UploadMediaResponseData
   */
  public static MediaUploadAppendResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaUploadAppendResponseData.class);
  }
  
  /**
   * Convert an instance of UploadMediaResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
  
}
