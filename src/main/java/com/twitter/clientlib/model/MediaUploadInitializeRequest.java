/*
Copyright 2020 Twitter, Inc.
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
Do not edit the class manually.
*/

package com.twitter.clientlib.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.twitter.clientlib.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

public class MediaUploadInitializeRequest {
  public static final String SERIALIZED_NAME_ADDITIONAL_OWNERS = "additional_owners";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_OWNERS)
  private List<String> additionalOwners;
  
  public static final String SERIALIZED_NAME_MEDIA_CATEGORY = "media_category";
  @SerializedName(SERIALIZED_NAME_MEDIA_CATEGORY)
  private MediaCategoryEnum mediaCategory;
  
  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private MediaTypeEnum mediaType;
  
  public static final String SERIALIZED_NAME_SHARED = "shared";
  @SerializedName(SERIALIZED_NAME_SHARED)
  private Boolean shared;
  
  public static final String SERIALIZED_NAME_TOTAL_BYTES = "total_bytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES)
  private long totalBytes;
  
  public MediaUploadInitializeRequest() {
  
  }
  
  public List<String> getAdditionalOwners() {
    return additionalOwners;
  }
  
  public void setAdditionalOwners(List<String> additionalOwners) {
    this.additionalOwners = additionalOwners;
  }
  
  public MediaCategoryEnum getMediaCategory() {
    return mediaCategory;
  }
  
  public void setMediaCategory(MediaCategoryEnum mediaCategory) {
    this.mediaCategory = mediaCategory;
  }
  
  public MediaTypeEnum getMediaType() {
    return mediaType;
  }
  
  public void setMediaType(MediaTypeEnum mediaType) {
    this.mediaType = mediaType;
  }
  
  public Boolean getShared() {
    return shared;
  }
  
  public void setShared(Boolean shared) {
    this.shared = shared;
  }
  
  public long getTotalBytes() {
    return totalBytes;
  }
  
  public void setTotalBytes(long totalBytes) {
    this.totalBytes = totalBytes;
  }
  
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaUploadInitializeRequest that = (MediaUploadInitializeRequest) o;
    return Objects.equals(additionalOwners, that.additionalOwners) &&
        Objects.equals(mediaCategory, that.mediaCategory) &&
        Objects.equals(mediaType, that.mediaType) &&
        Objects.equals(shared, that.shared) &&
        Objects.equals(totalBytes, that.totalBytes);
  }
  
  @Override
  public int hashCode() {
    return Objects.hash(additionalOwners, mediaCategory, mediaType, shared, totalBytes);
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaUploadInitializeRequest {\n");
    sb.append("    additionalOwners: ").append(toIndentedString(additionalOwners)).append("\n");
    sb.append("    mediaCategory: ").append(toIndentedString(mediaCategory)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    totalBytes: ").append(toIndentedString(totalBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  
  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;
  
  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_owners");
    openapiFields.add("media_category");
    openapiFields.add("media_type");
    openapiFields.add("shared");
    openapiFields.add("total_bytes");
    
    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }
  
  /**
   * Validates the JSON Object and throws an exception if issues found
   *
   * @throws IOException if the JSON Object is invalid with respect to MediaUploadInitializeRequest
   */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // if (jsonObj == null) {
    //   if (TweetCreateRequest.openapiRequiredFields.isEmpty()) {
    //     return;
    //   } else { // has required fields
    //     throw new IllegalArgumentException(String.format("The required field(s) %s in TweetCreateRequest is not found in the empty JSON string", TweetCreateRequest.openapiRequiredFields.toString()));
    //   }
    // }
    
    if (jsonObj.get("additional_owners") != null && !jsonObj.get("additional_owners").isJsonArray()) {
      throw new IllegalArgumentException(String.format("Expected the field `additional_owners` to be an array in the JSON string but got `%s`", jsonObj.get("additional_owners").toString()));
    }
    
    if (jsonObj.get("media_category") != null && !jsonObj.get("media_category").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `media_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_category").toString()));
    }
    
    if (jsonObj.get("media_type") != null && !jsonObj.get("media_type").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `media_type` to be a "
          + "primitive type in the JSON string but got `%s`",
          jsonObj.get("media_type").toString()));
    }
    
    if (jsonObj.get("shared") != null && !jsonObj.get("shared").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `shared` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared").toString()));
    }
    
    if (jsonObj.get("total_bytes") != null && !jsonObj.get("total_bytes").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `total_bytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_bytes").toString()));
    }
  }
  
  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!TweetCreateRequest.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'TweetCreateRequest' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<TweetCreateRequest> thisAdapter
          = gson.getDelegateAdapter(this, TypeToken.get(TweetCreateRequest.class));
      
      return (TypeAdapter<T>) new TypeAdapter<TweetCreateRequest>() {
        @Override
        public void write(JsonWriter out, TweetCreateRequest value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }
        
        @Override
        public TweetCreateRequest read(JsonReader in) throws IOException {
          JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
          validateJsonObject(jsonObj);
          return thisAdapter.fromJsonTree(jsonObj);
        }
        
      }.nullSafe();
    }
  }
  
  /**
   * Create an instance of TweetCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TweetCreateRequest
   * @throws IOException if the JSON string is invalid with respect to TweetCreateRequest
   */
  public static TweetCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TweetCreateRequest.class);
  }
  
  /**
   * Convert an instance of TweetCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
  
  @JsonAdapter(MediaCategoryEnum.Adapter.class)
  public enum MediaCategoryEnum {
    AMPLIFY_VIDEO("amplify_video"),
    
    TWEET_GIF("tweet_gif"),
    
    TWEET_IMAGE("tweet_image"),
    
    TWEET_VIDEO("tweet_video"),
    
    DM_GIF("dm_gif"),
    
    DM_IMAGE("dm_image"),
    
    DM_VIDEO("dm_video"),
    
    SUBTITLES("subtitles");
    
    private String value;
    
    MediaCategoryEnum(String value) {
      this.value = value;
    }
    
    public String getValue() {
      return value;
    }
    
    @Override
    public String toString() {
      return String.valueOf(value);
    }
    
    public static MediaCategoryEnum fromValue(String value) {
      for (MediaCategoryEnum b : MediaCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
    
    public static class Adapter extends TypeAdapter<MediaCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MediaCategoryEnum enumeration) throws
          IOException {
        jsonWriter.value(enumeration.getValue());
      }
      
      @Override
      public MediaCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MediaCategoryEnum.fromValue(value);
      }
    }
  }
  
  @JsonAdapter(MediaTypeEnum.Adapter.class)
  public enum MediaTypeEnum {
    VIDEO_MP4("video/mp4"),
    
    VIDEO_WEBM("video/webm"),
    
    VIDEO_MP2T("video/mp2t"),
    
    VIDEO_QUICKTIME("video/quicktime"),
    
    TEXT_SRT("text/srt"),
    
    TEXT_VVT("text/vtt"),
    
    IMAGE_JPEG("image/jpeg"),
    
    IMAGE_GIF("image/gif"),
    
    IMAGE_BMP("image/bmp"),
    
    IMAGE_PNG("image/png"),
    
    IMAGE_WEBP("image/webp"),
    
    IMAGE_TIFF("image/tiff"),
    
    MODEL_GLTF_BINARY("model/gltf-binary"),
    
    MODEL_VND_USDZ_ZIP("model/vnd.usdz+zip");
    
    private String value;
    
    MediaTypeEnum(String value) {
      this.value = value;
    }
    
    public String getValue() {
      return value;
    }
    
    @Override
    public String toString() {
      return String.valueOf(value);
    }
    
    public static MediaTypeEnum fromValue(String value) {
      for (MediaTypeEnum b : MediaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
    
    public static class Adapter extends TypeAdapter<MediaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MediaTypeEnum enumeration) throws
          IOException {
        jsonWriter.value(enumeration.getValue());
      }
      
      @Override
      public MediaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MediaTypeEnum.fromValue(value);
      }
    }
  }
  
}
